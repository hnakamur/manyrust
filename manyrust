#!/bin/sh -e

# manyrust -
#   An script to install multiple rust versions.
#   Currently this script is supported only for OSX.
#
# License: http://opensource.org/licenses/Apache-2.0
#
# Usage: manyrust command [options]
# 
# command:
# - install [channel]
#     Install the lastest version of rust in specified channel.
# - showcfg [channel]
#     Show config to use the specified channel.
#     Example #1 usage with direnv ( https://github.com/direnv/direnv )
#       manyrust showcfg nightly >> .envrc
#       direnv allow .
#     Example #2
#       manyrust showcfg nightly 2015-07-14 >> .envrc
#       direnv allow .
# 
# arguments:
# - channel: must be one of stable, beta, nightly. default: stable

# The root directory of multiple rust installations.
# You can change this by setting the RUSTS_ROOT environment variable.
RUSTS_ROOT=${RUSTS_ROOT:-$HOME/rust}

tarball_sha256_url() {
	channel_or_version="$1"
	echo "https://static.rust-lang.org/dist/rust-${channel_or_version}-x86_64-apple-darwin.tar.gz.sha256"
}

save_tarball_sha256() {
	channel="$1"
	channel_or_version="$2"
	version_id="$3"
	mkdir -p "${RUSTS_ROOT:-$HOME/rust}/$channel/$version_id/etc"
	curl -s -o "${RUSTS_ROOT:-$HOME/rust}/$channel/$version_id/etc/tarball.sha256" `tarball_sha256_url "$channel_or_version"`
}

is_current_up_to_date() {
	channel="$1"
	channel_or_version="$2"
	local_file="${RUSTS_ROOT:-$HOME/rust}/$channel/current/etc/tarball.sha256" 
	[ -f "$local_file" ] && curl -s `tarball_sha256_url "$channel_or_version"` | cmp -s - "$local_file"
}

download_rustup_sh() {
	if [ ! -x "$RUSTS_ROOT/bin/rustup.sh" ]; then
		mkdir -p "$RUSTS_ROOT/bin"
		curl -sSf -o "$RUSTS_ROOT/bin/rustup.sh" https://static.rust-lang.org/rustup.sh
		chmod +x "$RUSTS_ROOT/bin/rustup.sh"
	fi
}

# print rustc version
#
# examples:
#   rustc 1.1.0 (35ceea399 2015-06-19)
#      -> 1.1.0
#   rustc 1.2.0-beta.2 (c8bab9d06 2015-07-09)
#      -> 1.2.0-beta.2
#   rustc 1.3.0-nightly (e4e93196e 2015-07-14)
#      -> 2015-07-14
rustc_version_id() {
	rustroot="${1}"
	set -- `DYLD_LIBRARY_PATH="$rustroot/lib" "$rustroot/bin/rustc" --version`
	case $2 in
	*-nightly)
		echo ${4%)};;
	*)
		# beta and stable
		echo $2;;
	esac
}

create_bashrc() {
	channel="$1"
	version_id="$2"
	mkdir -p "${RUSTS_ROOT:-$HOME/rust}/$channel/$version_id/etc"
	cat <<EOF > "${RUSTS_ROOT:-$HOME/rust}/$channel/$version_id/etc/bashrc"
rust_root="\${RUSTS_ROOT:-\$HOME/rust}/$channel/$version_id/rust"
export PATH="\$rust_root/bin:\$PATH"
export DYLD_LIBRARY_PATH="\$rust_root/lib:\$DYLD_LIBARARY_PATH"
EOF
}

create_current_link() {
	channel="$1"
	version_id="$2"
	ln -sf "$version_id" "$RUSTS_ROOT/$channel/current"
}

get_current_stable_version() {
	# NOTE: We have to save to a temporary file because
	# echo something | read variable
	# does not work.
	channel_rust_stable_file="${TMPDIR:-/tmp}/channel-rust-stable.$$"
	curl -s -o "$channel_rust_stable_file" https://static.rust-lang.org/dist/channel-rust-stable
	# NOTE: Read the only first line
	read filename < "$channel_rust_stable_file"
	rm "$channel_rust_stable_file"

	# NOTE: For example, take 1.1.0 out of rust-1.1.0-i686-apple-darwin.pkg
	work=${filename#*-}
	version=${work%%-*}
	echo $version
}

install() {
	channel="$1"

	case "$channel" in
	stable)
		channel_or_version=`get_current_stable_version`
		;;
	beta|nightly)
		channel_or_version="$channel"
		;;
	*)
		usage
		;;
	esac
	if is_current_up_to_date "$channel" "$channel_or_version"; then
		echo "The latest version of rust is already installed in \"$channel\" channel. exiting."
		exit 0
	fi

	download_rustup_sh
	mkdir -p "$RUSTS_ROOT/tmp/rust"
	"$RUSTS_ROOT/bin/rustup.sh" --channel="$channel" --prefix="$RUSTS_ROOT/tmp/rust" --disable-sudo --yes
	version_id=`rustc_version_id "$RUSTS_ROOT/tmp/rust"`
	mkdir -p "$RUSTS_ROOT/$channel/$version_id"
	save_tarball_sha256 "$channel" "$channel_or_version" "$version_id"
	mv "$RUSTS_ROOT/tmp/rust" "$RUSTS_ROOT/$channel/$version_id/rust"
	create_bashrc "$channel" "$version_id"
	create_current_link "$channel" "$version_id"
}

showcfg() {
	channel="$1"
	version="$2"
	case "$channel" in
	stable|beta|nightly)
		if [ ! -d "${RUSTS_ROOT:-\$HOME/rust}/$channel/$version" ]; then
			echo "Specified version of rust is not installed. exiting" 1>&2
			exit 2
		fi
		echo "source \"\${RUSTS_ROOT:-\$HOME/rust}/$channel/current/etc/bashrc\""
		;;
	*)
		usage
		;;
	esac
}

usage() {
	cat <<EOF
Usage: manyrust command [options]

command:
- install [channel]
    Install the lastest version of rust in specified channel.
- showcfg [channel_or_version]
    Show config to use the specified channel.
    Example #1 usage with direnv ( https://github.com/direnv/direnv )
      manyrust showcfg nightly >> .envrc
      direnv allow .
    Example #2
      manyrust showcfg nightly 2015-07-14 >> .envrc
      direnv allow .

arguments:
- channel: must be one of stable, beta, nightly. default: stable

EOF
	exit 1
}

if [ $# -eq 0 ]; then
	usage
fi
command="$1"
shift
case "$command" in
install)
	channel="${1:-stable}"
	install "$channel"
	;;
showcfg)
	channel="${1:-stable}"
	version="${2:-current}"
	showcfg "$channel" "$version"
	;;
*)
	usage
	;;
esac
